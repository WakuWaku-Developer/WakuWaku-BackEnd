plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'

	id 'jacoco'
	id "org.sonarqube" version "5.1.0.4882"

	id 'com.epages.restdocs-api-spec' version '0.18.2'
}

group = 'dev.back-end'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// api docs
	testImplementation('com.epages:restdocs-api-spec-mockmvc:0.18.2') //2.2
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// gson
	implementation 'com.google.code.gson:gson'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// oauth
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// TestContainers
	testImplementation "org.testcontainers:testcontainers:1.20.0"
	testImplementation "org.testcontainers:junit-jupiter:1.20.0"
	testImplementation 'com.redis.testcontainers:testcontainers-redis-junit:1.6.4'

	// Monitoring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
	useJUnitPlatform()

	jacoco {
		destinationFile= layout.buildDirectory.file('jacoco/jacoco.exec').get().asFile
	}

	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.11"
}

// JaCoCo 테스트 커버리지 측정 안하고 싶은 패턴
def jacocoExcludePatterns = [
		'*.*Application*',
		"*.*Config*",
		"*.*Exception*",
		"*.test.*",
		"*.resources.*",
		"*.dto.*",
		"*.entity.*",
		"*.*Entity*",
		"*.annotation.*",
		"*.constant.*",
		"*.old.*",
		"*.Result*",
		"*.BaseResponse*",
		"*.*RequestUrlProvider",
		"*.presentation.*",
		"*.util.*"
]

// JaCoCo 보고서 + SonarCloud 관련 제외 패턴
def sonarCloudExcludePatterns = [
		'**/*Application*',
		"**/*Config*",
		"**/*Exception*",
		"**/test/**/*",
		"**/resources/**/*",
		"**/dto/**/*",
		"**/entity/**/*",
		"**/*Entity*",
		"**/annotation/**/*",
		"**/constant/**/*",
		"**/old/**/*",
		"**/Result*",
		"**/BaseResponse*",
		"**/*RequestUrlProvider",
		"**/presentation/**/*",
		"**/util/**/*"
]

//테스트 커버리지 규칙 정의하고 검증
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true

			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.30
			}

			excludes = jacocoExcludePatterns
		}
	}
}

jacocoTestReport {
	reports {
		html.required.set(true)
		xml.required.set(true)
		csv.required.set(true)
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					// JaCoCo 리포트 결과에 제외 시킬 패턴
					fileTree(dir: it, excludes: sonarCloudExcludePatterns)
				})
		)
	}

	finalizedBy jacocoTestCoverageVerification
}

// 매번 jacocoTestReport task와 jacocoTestCoverageVerification task를 지정해 주려면 귀찮으니
// 이 task들을 하나로 묶는  task
tasks.register('testCoverage', Test) {
	group 'verification'
	description 'Runs the unit tests with coverage'

	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

sonar {
	properties {
		// 분석 전에 프로젝트가 컴파일되도록 설정
		property 'sonar.gradle.skipCompile', 'true'
		property 'sonar.projectKey', 'WakuWaku-Developer_WakuWaku-BackEnd'
		property 'sonar.organization', 'wakuwaku'
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.test.exclusions', sonarCloudExcludePatterns.join(',')
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
		property 'sonar.coverage.exclusions', sonarCloudExcludePatterns.join(',')
	}
}

jar {
	enabled = false
}

openapi3 {
	setServers([
			{
				url = "https://api.wakuwaku-place.store"
				description = "Develop Server"
			},
			{
				url = "http://localhost:8080"
				description = "Local Server"
			}
	])
	title = "WakuWaku API Document"
	description = "WakuWaku API 명세서입니다."
	version = "0.1.0"
	format = "yaml"
}

tasks.register('copyOasToSwagger', Copy) {
	delete "src/main/resources/static/swagger-ui/openapi3.yaml"

	from layout.buildDirectory.dir("/api-spec/openapi3.yaml").get().asFile
	into "src/main/resources/static/swagger-ui/"

	dependsOn "openapi3"
}
